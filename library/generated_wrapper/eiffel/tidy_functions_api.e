note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"
-- functions wrapper
class TIDY_FUNCTIONS_API


feature -- Access

	tidy_set_malloc_call (fmalloc: POINTER): INTEGER 
		do
			Result := c_tidy_set_malloc_call (fmalloc)
		ensure
			instance_free: class
		end

	tidy_set_realloc_call (frealloc: POINTER): INTEGER 
		do
			Result := c_tidy_set_realloc_call (frealloc)
		ensure
			instance_free: class
		end

	tidy_set_free_call (ffree: POINTER): INTEGER 
		do
			Result := c_tidy_set_free_call (ffree)
		ensure
			instance_free: class
		end

	tidy_set_panic_call (fpanic: POINTER): INTEGER 
		do
			Result := c_tidy_set_panic_call (fpanic)
		ensure
			instance_free: class
		end

	tidy_create: detachable TIDY_DOC_STRUCT_API 
		do
			if attached c_tidy_create as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	tidy_create_with_allocator (allocator: TIDY_ALLOCATOR_STRUCT_API): detachable TIDY_DOC_STRUCT_API 
		do
			if attached c_tidy_create_with_allocator (allocator.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	tidy_release (tdoc: TIDY_DOC_STRUCT_API) 
		do
			c_tidy_release (tdoc.item)
		ensure
			instance_free: class
		end

	tidy_set_app_data (tdoc: TIDY_DOC_STRUCT_API; appdata: POINTER) 
		do
			c_tidy_set_app_data (tdoc.item, appdata)
		ensure
			instance_free: class
		end

	tidy_get_app_data (tdoc: TIDY_DOC_STRUCT_API): POINTER 
		do
			Result := c_tidy_get_app_data (tdoc.item)
		ensure
			instance_free: class
		end

	tidy_release_date: POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyReleaseDate ();
			]"
		end

	tidy_library_version: POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyLibraryVersion ();
			]"
		end

	tidy_platform: POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyPlatform ();
			]"
		end

	tidy_status (tdoc: TIDY_DOC_STRUCT_API): INTEGER 
		do
			Result := c_tidy_status (tdoc.item)
		ensure
			instance_free: class
		end

	tidy_detected_html_version (tdoc: TIDY_DOC_STRUCT_API): INTEGER 
		do
			Result := c_tidy_detected_html_version (tdoc.item)
		ensure
			instance_free: class
		end

	tidy_detected_xhtml (tdoc: TIDY_DOC_STRUCT_API): INTEGER 
		do
			Result := c_tidy_detected_xhtml (tdoc.item)
		ensure
			instance_free: class
		end

	tidy_detected_generic_xml (tdoc: TIDY_DOC_STRUCT_API): INTEGER 
		do
			Result := c_tidy_detected_generic_xml (tdoc.item)
		ensure
			instance_free: class
		end

	tidy_error_count (tdoc: TIDY_DOC_STRUCT_API): INTEGER 
		do
			Result := c_tidy_error_count (tdoc.item)
		ensure
			instance_free: class
		end

	tidy_warning_count (tdoc: TIDY_DOC_STRUCT_API): INTEGER 
		do
			Result := c_tidy_warning_count (tdoc.item)
		ensure
			instance_free: class
		end

	tidy_access_warning_count (tdoc: TIDY_DOC_STRUCT_API): INTEGER 
		do
			Result := c_tidy_access_warning_count (tdoc.item)
		ensure
			instance_free: class
		end

	tidy_config_error_count (tdoc: TIDY_DOC_STRUCT_API): INTEGER 
		do
			Result := c_tidy_config_error_count (tdoc.item)
		ensure
			instance_free: class
		end

	tidy_error_summary (tdoc: TIDY_DOC_STRUCT_API) 
		do
			c_tidy_error_summary (tdoc.item)
		ensure
			instance_free: class
		end

	tidy_general_info (tdoc: TIDY_DOC_STRUCT_API) 
		do
			c_tidy_general_info (tdoc.item)
		ensure
			instance_free: class
		end

	tidy_load_config (tdoc: TIDY_DOC_STRUCT_API; configfile: C_STRING): INTEGER 
		do
			Result := c_tidy_load_config (tdoc.item, configfile.item)
		ensure
			instance_free: class
		end

	tidy_load_config_enc (tdoc: TIDY_DOC_STRUCT_API; configfile: C_STRING; charenc: C_STRING): INTEGER 
		do
			Result := c_tidy_load_config_enc (tdoc.item, configfile.item, charenc.item)
		ensure
			instance_free: class
		end

	tidy_file_exists (tdoc: TIDY_DOC_STRUCT_API; filename: C_STRING): INTEGER 
		do
			Result := c_tidy_file_exists (tdoc.item, filename.item)
		ensure
			instance_free: class
		end

	tidy_set_char_encoding (tdoc: TIDY_DOC_STRUCT_API; encnam: C_STRING): INTEGER 
		do
			Result := c_tidy_set_char_encoding (tdoc.item, encnam.item)
		ensure
			instance_free: class
		end

	tidy_set_in_char_encoding (tdoc: TIDY_DOC_STRUCT_API; encnam: C_STRING): INTEGER 
		do
			Result := c_tidy_set_in_char_encoding (tdoc.item, encnam.item)
		ensure
			instance_free: class
		end

	tidy_set_out_char_encoding (tdoc: TIDY_DOC_STRUCT_API; encnam: C_STRING): INTEGER 
		do
			Result := c_tidy_set_out_char_encoding (tdoc.item, encnam.item)
		ensure
			instance_free: class
		end

	tidy_set_option_callback (tdoc: TIDY_DOC_STRUCT_API; poptcallback: POINTER): INTEGER 
		do
			Result := c_tidy_set_option_callback (tdoc.item, poptcallback)
		ensure
			instance_free: class
		end

	tidy_set_config_callback (tdoc: TIDY_DOC_STRUCT_API; pconfigcallback: POINTER): INTEGER 
		do
			Result := c_tidy_set_config_callback (tdoc.item, pconfigcallback)
		ensure
			instance_free: class
		end

	tidy_set_config_change_callback (tdoc: TIDY_DOC_STRUCT_API; pcallback: POINTER): INTEGER 
		do
			Result := c_tidy_set_config_change_callback (tdoc.item, pcallback)
		ensure
			instance_free: class
		end

	tidy_opt_get_id (opt: TIDY_OPTION_STRUCT_API): INTEGER 
		do
			Result := c_tidy_opt_get_id (opt.item)
		ensure
			instance_free: class
		end

	tidy_opt_get_id_for_name (optnam: C_STRING): INTEGER 
		do
			Result := c_tidy_opt_get_id_for_name (optnam.item)
		ensure
			instance_free: class
		end

	tidy_get_option_list (tdoc: TIDY_DOC_STRUCT_API): detachable TIDY_ITERATOR_STRUCT_API 
		do
			if attached c_tidy_get_option_list (tdoc.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	tidy_get_next_option (tdoc: TIDY_DOC_STRUCT_API; pos: TIDY_ITERATOR_STRUCT_API): detachable TIDY_OPTION_STRUCT_API 
		do
			if attached c_tidy_get_next_option (tdoc.item, pos.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	tidy_get_option (tdoc: TIDY_DOC_STRUCT_API; optid: INTEGER): detachable TIDY_OPTION_STRUCT_API 
		do
			if attached c_tidy_get_option (tdoc.item, optid) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	tidy_get_option_by_name (tdoc: TIDY_DOC_STRUCT_API; optnam: C_STRING): detachable TIDY_OPTION_STRUCT_API 
		do
			if attached c_tidy_get_option_by_name (tdoc.item, optnam.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	tidy_opt_get_name (opt: TIDY_OPTION_STRUCT_API): POINTER 
		do
			Result := c_tidy_opt_get_name (opt.item)
		ensure
			instance_free: class
		end

	tidy_opt_get_type (opt: TIDY_OPTION_STRUCT_API): INTEGER 
		do
			Result := c_tidy_opt_get_type (opt.item)
		ensure
			instance_free: class
		end

	tidy_option_is_list (opt: TIDY_OPTION_STRUCT_API): INTEGER 
		do
			Result := c_tidy_option_is_list (opt.item)
		ensure
			instance_free: class
		end

	tidy_opt_is_read_only (opt: TIDY_OPTION_STRUCT_API): INTEGER 
		do
			Result := c_tidy_opt_is_read_only (opt.item)
		ensure
			instance_free: class
		end

	tidy_opt_get_category (opt: TIDY_OPTION_STRUCT_API): INTEGER 
		do
			Result := c_tidy_opt_get_category (opt.item)
		ensure
			instance_free: class
		end

	tidy_opt_get_default (opt: TIDY_OPTION_STRUCT_API): POINTER 
		do
			Result := c_tidy_opt_get_default (opt.item)
		ensure
			instance_free: class
		end

	tidy_opt_get_default_int (opt: TIDY_OPTION_STRUCT_API): INTEGER 
		do
			Result := c_tidy_opt_get_default_int (opt.item)
		ensure
			instance_free: class
		end

	tidy_opt_get_default_bool (opt: TIDY_OPTION_STRUCT_API): INTEGER 
		do
			Result := c_tidy_opt_get_default_bool (opt.item)
		ensure
			instance_free: class
		end

	tidy_opt_get_pick_list (opt: TIDY_OPTION_STRUCT_API): detachable TIDY_ITERATOR_STRUCT_API 
		do
			if attached c_tidy_opt_get_pick_list (opt.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	tidy_opt_get_next_pick (opt: TIDY_OPTION_STRUCT_API; pos: TIDY_ITERATOR_STRUCT_API): POINTER 
		do
			Result := c_tidy_opt_get_next_pick (opt.item, pos.item)
		ensure
			instance_free: class
		end

	tidy_opt_get_value (tdoc: TIDY_DOC_STRUCT_API; optid: INTEGER): POINTER 
		do
			Result := c_tidy_opt_get_value (tdoc.item, optid)
		ensure
			instance_free: class
		end

	tidy_opt_set_value (tdoc: TIDY_DOC_STRUCT_API; optid: INTEGER; val: C_STRING): INTEGER 
		do
			Result := c_tidy_opt_set_value (tdoc.item, optid, val.item)
		ensure
			instance_free: class
		end

	tidy_opt_parse_value (tdoc: TIDY_DOC_STRUCT_API; optnam: C_STRING; val: C_STRING): INTEGER 
		do
			Result := c_tidy_opt_parse_value (tdoc.item, optnam.item, val.item)
		ensure
			instance_free: class
		end

	tidy_opt_get_int (tdoc: TIDY_DOC_STRUCT_API; optid: INTEGER): INTEGER 
		do
			Result := c_tidy_opt_get_int (tdoc.item, optid)
		ensure
			instance_free: class
		end

	tidy_opt_set_int (tdoc: TIDY_DOC_STRUCT_API; optid: INTEGER; val: INTEGER): INTEGER 
		do
			Result := c_tidy_opt_set_int (tdoc.item, optid, val)
		ensure
			instance_free: class
		end

	tidy_opt_get_bool (tdoc: TIDY_DOC_STRUCT_API; optid: INTEGER): INTEGER 
		do
			Result := c_tidy_opt_get_bool (tdoc.item, optid)
		ensure
			instance_free: class
		end

	tidy_opt_set_bool (tdoc: TIDY_DOC_STRUCT_API; optid: INTEGER; val: INTEGER): INTEGER 
		do
			Result := c_tidy_opt_set_bool (tdoc.item, optid, val)
		ensure
			instance_free: class
		end

	tidy_opt_reset_to_default (tdoc: TIDY_DOC_STRUCT_API; opt: INTEGER): INTEGER 
		do
			Result := c_tidy_opt_reset_to_default (tdoc.item, opt)
		ensure
			instance_free: class
		end

	tidy_opt_reset_all_to_default (tdoc: TIDY_DOC_STRUCT_API): INTEGER 
		do
			Result := c_tidy_opt_reset_all_to_default (tdoc.item)
		ensure
			instance_free: class
		end

	tidy_opt_snapshot (tdoc: TIDY_DOC_STRUCT_API): INTEGER 
		do
			Result := c_tidy_opt_snapshot (tdoc.item)
		ensure
			instance_free: class
		end

	tidy_opt_reset_to_snapshot (tdoc: TIDY_DOC_STRUCT_API): INTEGER 
		do
			Result := c_tidy_opt_reset_to_snapshot (tdoc.item)
		ensure
			instance_free: class
		end

	tidy_opt_diff_than_default (tdoc: TIDY_DOC_STRUCT_API): INTEGER 
		do
			Result := c_tidy_opt_diff_than_default (tdoc.item)
		ensure
			instance_free: class
		end

	tidy_opt_diff_than_snapshot (tdoc: TIDY_DOC_STRUCT_API): INTEGER 
		do
			Result := c_tidy_opt_diff_than_snapshot (tdoc.item)
		ensure
			instance_free: class
		end

	tidy_opt_copy_config (tdocto: TIDY_DOC_STRUCT_API; tdocfrom: TIDY_DOC_STRUCT_API): INTEGER 
		do
			Result := c_tidy_opt_copy_config (tdocto.item, tdocfrom.item)
		ensure
			instance_free: class
		end

	tidy_opt_get_enc_name (tdoc: TIDY_DOC_STRUCT_API; optid: INTEGER): POINTER 
		do
			Result := c_tidy_opt_get_enc_name (tdoc.item, optid)
		ensure
			instance_free: class
		end

	tidy_opt_get_curr_pick (tdoc: TIDY_DOC_STRUCT_API; optid: INTEGER): POINTER 
		do
			Result := c_tidy_opt_get_curr_pick (tdoc.item, optid)
		ensure
			instance_free: class
		end

	tidy_opt_get_decl_tag_list (tdoc: TIDY_DOC_STRUCT_API): detachable TIDY_ITERATOR_STRUCT_API 
		do
			if attached c_tidy_opt_get_decl_tag_list (tdoc.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	tidy_opt_get_next_decl_tag (tdoc: TIDY_DOC_STRUCT_API; optid: INTEGER; iter: TIDY_ITERATOR_STRUCT_API): POINTER 
		do
			Result := c_tidy_opt_get_next_decl_tag (tdoc.item, optid, iter.item)
		ensure
			instance_free: class
		end

	tidy_opt_get_priority_attr_list (tdoc: TIDY_DOC_STRUCT_API): detachable TIDY_ITERATOR_STRUCT_API 
		do
			if attached c_tidy_opt_get_priority_attr_list (tdoc.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	tidy_opt_get_next_priority_attr (tdoc: TIDY_DOC_STRUCT_API; iter: TIDY_ITERATOR_STRUCT_API): POINTER 
		do
			Result := c_tidy_opt_get_next_priority_attr (tdoc.item, iter.item)
		ensure
			instance_free: class
		end

	tidy_opt_get_muted_message_list (tdoc: TIDY_DOC_STRUCT_API): detachable TIDY_ITERATOR_STRUCT_API 
		do
			if attached c_tidy_opt_get_muted_message_list (tdoc.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	tidy_opt_get_next_muted_message (tdoc: TIDY_DOC_STRUCT_API; iter: TIDY_ITERATOR_STRUCT_API): POINTER 
		do
			Result := c_tidy_opt_get_next_muted_message (tdoc.item, iter.item)
		ensure
			instance_free: class
		end

	tidy_opt_get_doc (tdoc: TIDY_DOC_STRUCT_API; opt: TIDY_OPTION_STRUCT_API): POINTER 
		do
			Result := c_tidy_opt_get_doc (tdoc.item, opt.item)
		ensure
			instance_free: class
		end

	tidy_opt_get_doc_links_list (tdoc: TIDY_DOC_STRUCT_API; opt: TIDY_OPTION_STRUCT_API): detachable TIDY_ITERATOR_STRUCT_API 
		do
			if attached c_tidy_opt_get_doc_links_list (tdoc.item, opt.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	tidy_opt_get_next_doc_links (tdoc: TIDY_DOC_STRUCT_API; pos: TIDY_ITERATOR_STRUCT_API): detachable TIDY_OPTION_STRUCT_API 
		do
			if attached c_tidy_opt_get_next_doc_links (tdoc.item, pos.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	tidy_init_source (source: TIDY_INPUT_SOURCE_STRUCT_API; srcdata: POINTER; gbfunc: POINTER; ugbfunc: POINTER; endfunc: POINTER): INTEGER 
		do
			Result := c_tidy_init_source (source.item, srcdata, gbfunc, ugbfunc, endfunc)
		ensure
			instance_free: class
		end

	tidy_get_byte (source: TIDY_INPUT_SOURCE_STRUCT_API): INTEGER 
		do
			Result := c_tidy_get_byte (source.item)
		ensure
			instance_free: class
		end

	tidy_unget_byte (source: TIDY_INPUT_SOURCE_STRUCT_API; bytevalue: INTEGER) 
		do
			c_tidy_unget_byte (source.item, bytevalue)
		ensure
			instance_free: class
		end

	tidy_is_eof (source: TIDY_INPUT_SOURCE_STRUCT_API): INTEGER 
		do
			Result := c_tidy_is_eof (source.item)
		ensure
			instance_free: class
		end

	tidy_init_sink (sink: TIDY_OUTPUT_SINK_STRUCT_API; snkdata: POINTER; pbfunc: POINTER): INTEGER 
		do
			Result := c_tidy_init_sink (sink.item, snkdata, pbfunc)
		ensure
			instance_free: class
		end

	tidy_put_byte (sink: TIDY_OUTPUT_SINK_STRUCT_API; bytevalue: INTEGER) 
		do
			c_tidy_put_byte (sink.item, bytevalue)
		ensure
			instance_free: class
		end

	tidy_set_emacs_file (tdoc: TIDY_DOC_STRUCT_API; filepath: C_STRING) 
		do
			c_tidy_set_emacs_file (tdoc.item, filepath.item)
		ensure
			instance_free: class
		end

	tidy_get_emacs_file (tdoc: TIDY_DOC_STRUCT_API): POINTER 
		do
			Result := c_tidy_get_emacs_file (tdoc.item)
		ensure
			instance_free: class
		end

	tidy_set_error_file (tdoc: TIDY_DOC_STRUCT_API; errfilnam: C_STRING): detachable IOBUF_STRUCT_API 
		do
			if attached c_tidy_set_error_file (tdoc.item, errfilnam.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	tidy_set_error_buffer (tdoc: TIDY_DOC_STRUCT_API; errbuf: TIDY_BUFFER_STRUCT_API): INTEGER 
		do
			Result := c_tidy_set_error_buffer (tdoc.item, errbuf.item)
		ensure
			instance_free: class
		end

	tidy_set_error_sink (tdoc: TIDY_DOC_STRUCT_API; sink: TIDY_OUTPUT_SINK_STRUCT_API): INTEGER 
		do
			Result := c_tidy_set_error_sink (tdoc.item, sink.item)
		ensure
			instance_free: class
		end

	tidy_set_report_filter (tdoc: TIDY_DOC_STRUCT_API; filtcallback: POINTER): INTEGER 
		do
			Result := c_tidy_set_report_filter (tdoc.item, filtcallback)
		ensure
			instance_free: class
		end

	tidy_set_report_callback (tdoc: TIDY_DOC_STRUCT_API; filtcallback: POINTER): INTEGER 
		do
			Result := c_tidy_set_report_callback (tdoc.item, filtcallback)
		ensure
			instance_free: class
		end

	tidy_set_message_callback (tdoc: TIDY_DOC_STRUCT_API; filtcallback: POINTER): INTEGER 
		do
			Result := c_tidy_set_message_callback (tdoc.item, filtcallback)
		ensure
			instance_free: class
		end

	tidy_get_message_doc (tmessage: TIDY_MESSAGE_STRUCT_API): detachable TIDY_DOC_STRUCT_API 
		do
			if attached c_tidy_get_message_doc (tmessage.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	tidy_get_message_code (tmessage: TIDY_MESSAGE_STRUCT_API): INTEGER 
		do
			Result := c_tidy_get_message_code (tmessage.item)
		ensure
			instance_free: class
		end

	tidy_get_message_key (tmessage: TIDY_MESSAGE_STRUCT_API): POINTER 
		do
			Result := c_tidy_get_message_key (tmessage.item)
		ensure
			instance_free: class
		end

	tidy_get_message_line (tmessage: TIDY_MESSAGE_STRUCT_API): INTEGER 
		do
			Result := c_tidy_get_message_line (tmessage.item)
		ensure
			instance_free: class
		end

	tidy_get_message_column (tmessage: TIDY_MESSAGE_STRUCT_API): INTEGER 
		do
			Result := c_tidy_get_message_column (tmessage.item)
		ensure
			instance_free: class
		end

	tidy_get_message_level (tmessage: TIDY_MESSAGE_STRUCT_API): INTEGER 
		do
			Result := c_tidy_get_message_level (tmessage.item)
		ensure
			instance_free: class
		end

	tidy_get_message_is_muted (tmessage: TIDY_MESSAGE_STRUCT_API): INTEGER 
		do
			Result := c_tidy_get_message_is_muted (tmessage.item)
		ensure
			instance_free: class
		end

	tidy_get_message_format_default (tmessage: TIDY_MESSAGE_STRUCT_API): POINTER 
		do
			Result := c_tidy_get_message_format_default (tmessage.item)
		ensure
			instance_free: class
		end

	tidy_get_message_format (tmessage: TIDY_MESSAGE_STRUCT_API): POINTER 
		do
			Result := c_tidy_get_message_format (tmessage.item)
		ensure
			instance_free: class
		end

	tidy_get_message_default (tmessage: TIDY_MESSAGE_STRUCT_API): POINTER 
		do
			Result := c_tidy_get_message_default (tmessage.item)
		ensure
			instance_free: class
		end

	tidy_get_message (tmessage: TIDY_MESSAGE_STRUCT_API): POINTER 
		do
			Result := c_tidy_get_message (tmessage.item)
		ensure
			instance_free: class
		end

	tidy_get_message_pos_default (tmessage: TIDY_MESSAGE_STRUCT_API): POINTER 
		do
			Result := c_tidy_get_message_pos_default (tmessage.item)
		ensure
			instance_free: class
		end

	tidy_get_message_pos (tmessage: TIDY_MESSAGE_STRUCT_API): POINTER 
		do
			Result := c_tidy_get_message_pos (tmessage.item)
		ensure
			instance_free: class
		end

	tidy_get_message_prefix_default (tmessage: TIDY_MESSAGE_STRUCT_API): POINTER 
		do
			Result := c_tidy_get_message_prefix_default (tmessage.item)
		ensure
			instance_free: class
		end

	tidy_get_message_prefix (tmessage: TIDY_MESSAGE_STRUCT_API): POINTER 
		do
			Result := c_tidy_get_message_prefix (tmessage.item)
		ensure
			instance_free: class
		end

	tidy_get_message_output_default (tmessage: TIDY_MESSAGE_STRUCT_API): POINTER 
		do
			Result := c_tidy_get_message_output_default (tmessage.item)
		ensure
			instance_free: class
		end

	tidy_get_message_output (tmessage: TIDY_MESSAGE_STRUCT_API): POINTER 
		do
			Result := c_tidy_get_message_output (tmessage.item)
		ensure
			instance_free: class
		end

	tidy_get_message_arguments (tmessage: TIDY_MESSAGE_STRUCT_API): detachable TIDY_ITERATOR_STRUCT_API 
		do
			if attached c_tidy_get_message_arguments (tmessage.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	tidy_get_next_message_argument (tmessage: TIDY_MESSAGE_STRUCT_API; iter: TIDY_ITERATOR_STRUCT_API): detachable TIDY_MESSAGE_ARGUMENT_STRUCT_API 
		do
			if attached c_tidy_get_next_message_argument (tmessage.item, iter.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	tidy_get_arg_type (tmessage: TIDY_MESSAGE_STRUCT_API; arg: TIDY_MESSAGE_ARGUMENT_STRUCT_API): INTEGER 
		do
			Result := c_tidy_get_arg_type (tmessage.item, arg.item)
		ensure
			instance_free: class
		end

	tidy_get_arg_format (tmessage: TIDY_MESSAGE_STRUCT_API; arg: TIDY_MESSAGE_ARGUMENT_STRUCT_API): POINTER 
		do
			Result := c_tidy_get_arg_format (tmessage.item, arg.item)
		ensure
			instance_free: class
		end

	tidy_get_arg_value_string (tmessage: TIDY_MESSAGE_STRUCT_API; arg: TIDY_MESSAGE_ARGUMENT_STRUCT_API): POINTER 
		do
			Result := c_tidy_get_arg_value_string (tmessage.item, arg.item)
		ensure
			instance_free: class
		end

	tidy_get_arg_value_uint (tmessage: TIDY_MESSAGE_STRUCT_API; arg: TIDY_MESSAGE_ARGUMENT_STRUCT_API): INTEGER 
		do
			Result := c_tidy_get_arg_value_uint (tmessage.item, arg.item)
		ensure
			instance_free: class
		end

	tidy_get_arg_value_int (tmessage: TIDY_MESSAGE_STRUCT_API; arg: TIDY_MESSAGE_ARGUMENT_STRUCT_API): INTEGER 
		do
			Result := c_tidy_get_arg_value_int (tmessage.item, arg.item)
		ensure
			instance_free: class
		end

	tidy_get_arg_value_double (tmessage: TIDY_MESSAGE_STRUCT_API; arg: TIDY_MESSAGE_ARGUMENT_STRUCT_API): REAL_64 
		do
			Result := c_tidy_get_arg_value_double (tmessage.item, arg.item)
		ensure
			instance_free: class
		end

	tidy_set_pretty_printer_callback (tdoc: TIDY_DOC_STRUCT_API; callback: POINTER): INTEGER 
		do
			Result := c_tidy_set_pretty_printer_callback (tdoc.item, callback)
		ensure
			instance_free: class
		end

	tidy_parse_file (tdoc: TIDY_DOC_STRUCT_API; filename: C_STRING): INTEGER 
		do
			Result := c_tidy_parse_file (tdoc.item, filename.item)
		ensure
			instance_free: class
		end

	tidy_parse_stdin (tdoc: TIDY_DOC_STRUCT_API): INTEGER 
		do
			Result := c_tidy_parse_stdin (tdoc.item)
		ensure
			instance_free: class
		end

	tidy_parse_string (tdoc: TIDY_DOC_STRUCT_API; content: C_STRING): INTEGER 
		do
			Result := c_tidy_parse_string (tdoc.item, content.item)
		ensure
			instance_free: class
		end

	tidy_parse_buffer (tdoc: TIDY_DOC_STRUCT_API; buf: TIDY_BUFFER_STRUCT_API): INTEGER 
		do
			Result := c_tidy_parse_buffer (tdoc.item, buf.item)
		ensure
			instance_free: class
		end

	tidy_parse_source (tdoc: TIDY_DOC_STRUCT_API; source: TIDY_INPUT_SOURCE_STRUCT_API): INTEGER 
		do
			Result := c_tidy_parse_source (tdoc.item, source.item)
		ensure
			instance_free: class
		end

	tidy_clean_and_repair (tdoc: TIDY_DOC_STRUCT_API): INTEGER 
		do
			Result := c_tidy_clean_and_repair (tdoc.item)
		ensure
			instance_free: class
		end

	tidy_run_diagnostics (tdoc: TIDY_DOC_STRUCT_API): INTEGER 
		do
			Result := c_tidy_run_diagnostics (tdoc.item)
		ensure
			instance_free: class
		end

	tidy_report_doctype (tdoc: TIDY_DOC_STRUCT_API): INTEGER 
		do
			Result := c_tidy_report_doctype (tdoc.item)
		ensure
			instance_free: class
		end

	tidy_save_file (tdoc: TIDY_DOC_STRUCT_API; filename: C_STRING): INTEGER 
		do
			Result := c_tidy_save_file (tdoc.item, filename.item)
		ensure
			instance_free: class
		end

	tidy_save_stdout (tdoc: TIDY_DOC_STRUCT_API): INTEGER 
		do
			Result := c_tidy_save_stdout (tdoc.item)
		ensure
			instance_free: class
		end

	tidy_save_buffer (tdoc: TIDY_DOC_STRUCT_API; buf: TIDY_BUFFER_STRUCT_API): INTEGER 
		do
			Result := c_tidy_save_buffer (tdoc.item, buf.item)
		ensure
			instance_free: class
		end

	tidy_save_string (tdoc: TIDY_DOC_STRUCT_API; buffer: C_STRING; buflen: POINTER): INTEGER 
		do
			Result := c_tidy_save_string (tdoc.item, buffer.item, buflen)
		ensure
			instance_free: class
		end

	tidy_save_sink (tdoc: TIDY_DOC_STRUCT_API; sink: TIDY_OUTPUT_SINK_STRUCT_API): INTEGER 
		do
			Result := c_tidy_save_sink (tdoc.item, sink.item)
		ensure
			instance_free: class
		end

	tidy_opt_save_file (tdoc: TIDY_DOC_STRUCT_API; cfgfil: C_STRING): INTEGER 
		do
			Result := c_tidy_opt_save_file (tdoc.item, cfgfil.item)
		ensure
			instance_free: class
		end

	tidy_opt_save_sink (tdoc: TIDY_DOC_STRUCT_API; sink: TIDY_OUTPUT_SINK_STRUCT_API): INTEGER 
		do
			Result := c_tidy_opt_save_sink (tdoc.item, sink.item)
		ensure
			instance_free: class
		end

	tidy_get_root (tdoc: TIDY_DOC_STRUCT_API): detachable TIDY_NODE_STRUCT_API 
		do
			if attached c_tidy_get_root (tdoc.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	tidy_get_html (tdoc: TIDY_DOC_STRUCT_API): detachable TIDY_NODE_STRUCT_API 
		do
			if attached c_tidy_get_html (tdoc.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	tidy_get_head (tdoc: TIDY_DOC_STRUCT_API): detachable TIDY_NODE_STRUCT_API 
		do
			if attached c_tidy_get_head (tdoc.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	tidy_get_body (tdoc: TIDY_DOC_STRUCT_API): detachable TIDY_NODE_STRUCT_API 
		do
			if attached c_tidy_get_body (tdoc.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	tidy_get_parent (tnod: TIDY_NODE_STRUCT_API): detachable TIDY_NODE_STRUCT_API 
		do
			if attached c_tidy_get_parent (tnod.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	tidy_get_child (tnod: TIDY_NODE_STRUCT_API): detachable TIDY_NODE_STRUCT_API 
		do
			if attached c_tidy_get_child (tnod.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	tidy_get_next (tnod: TIDY_NODE_STRUCT_API): detachable TIDY_NODE_STRUCT_API 
		do
			if attached c_tidy_get_next (tnod.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	tidy_get_prev (tnod: TIDY_NODE_STRUCT_API): detachable TIDY_NODE_STRUCT_API 
		do
			if attached c_tidy_get_prev (tnod.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	tidy_discard_element (tdoc: TIDY_DOC_STRUCT_API; tnod: TIDY_NODE_STRUCT_API): detachable TIDY_NODE_STRUCT_API 
		do
			if attached c_tidy_discard_element (tdoc.item, tnod.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	tidy_attr_first (tnod: TIDY_NODE_STRUCT_API): detachable TIDY_ATTR_STRUCT_API 
		do
			if attached c_tidy_attr_first (tnod.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	tidy_attr_next (tattr: TIDY_ATTR_STRUCT_API): detachable TIDY_ATTR_STRUCT_API 
		do
			if attached c_tidy_attr_next (tattr.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	tidy_attr_name (tattr: TIDY_ATTR_STRUCT_API): POINTER 
		do
			Result := c_tidy_attr_name (tattr.item)
		ensure
			instance_free: class
		end

	tidy_attr_value (tattr: TIDY_ATTR_STRUCT_API): POINTER 
		do
			Result := c_tidy_attr_value (tattr.item)
		ensure
			instance_free: class
		end

	tidy_attr_discard (itdoc: TIDY_DOC_STRUCT_API; tnod: TIDY_NODE_STRUCT_API; tattr: TIDY_ATTR_STRUCT_API) 
		do
			c_tidy_attr_discard (itdoc.item, tnod.item, tattr.item)
		ensure
			instance_free: class
		end

	tidy_attr_get_id (tattr: TIDY_ATTR_STRUCT_API): INTEGER 
		do
			Result := c_tidy_attr_get_id (tattr.item)
		ensure
			instance_free: class
		end

	tidy_attr_is_event (tattr: TIDY_ATTR_STRUCT_API): INTEGER 
		do
			Result := c_tidy_attr_is_event (tattr.item)
		ensure
			instance_free: class
		end

	tidy_attr_get_by_id (tnod: TIDY_NODE_STRUCT_API; attid: INTEGER): detachable TIDY_ATTR_STRUCT_API 
		do
			if attached c_tidy_attr_get_by_id (tnod.item, attid) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	tidy_node_get_type (tnod: TIDY_NODE_STRUCT_API): INTEGER 
		do
			Result := c_tidy_node_get_type (tnod.item)
		ensure
			instance_free: class
		end

	tidy_node_get_name (tnod: TIDY_NODE_STRUCT_API): POINTER 
		do
			Result := c_tidy_node_get_name (tnod.item)
		ensure
			instance_free: class
		end

	tidy_node_is_text (tnod: TIDY_NODE_STRUCT_API): INTEGER 
		do
			Result := c_tidy_node_is_text (tnod.item)
		ensure
			instance_free: class
		end

	tidy_node_is_prop (tdoc: TIDY_DOC_STRUCT_API; tnod: TIDY_NODE_STRUCT_API): INTEGER 
		do
			Result := c_tidy_node_is_prop (tdoc.item, tnod.item)
		ensure
			instance_free: class
		end

	tidy_node_is_header (tnod: TIDY_NODE_STRUCT_API): INTEGER 
		do
			Result := c_tidy_node_is_header (tnod.item)
		ensure
			instance_free: class
		end

	tidy_node_has_text (tdoc: TIDY_DOC_STRUCT_API; tnod: TIDY_NODE_STRUCT_API): INTEGER 
		do
			Result := c_tidy_node_has_text (tdoc.item, tnod.item)
		ensure
			instance_free: class
		end

	tidy_node_get_text (tdoc: TIDY_DOC_STRUCT_API; tnod: TIDY_NODE_STRUCT_API; buf: TIDY_BUFFER_STRUCT_API): INTEGER 
		do
			Result := c_tidy_node_get_text (tdoc.item, tnod.item, buf.item)
		ensure
			instance_free: class
		end

	tidy_node_get_value (tdoc: TIDY_DOC_STRUCT_API; tnod: TIDY_NODE_STRUCT_API; buf: TIDY_BUFFER_STRUCT_API): INTEGER 
		do
			Result := c_tidy_node_get_value (tdoc.item, tnod.item, buf.item)
		ensure
			instance_free: class
		end

	tidy_node_get_id (tnod: TIDY_NODE_STRUCT_API): INTEGER 
		do
			Result := c_tidy_node_get_id (tnod.item)
		ensure
			instance_free: class
		end

	tidy_node_line (tnod: TIDY_NODE_STRUCT_API): INTEGER 
		do
			Result := c_tidy_node_line (tnod.item)
		ensure
			instance_free: class
		end

	tidy_node_column (tnod: TIDY_NODE_STRUCT_API): INTEGER 
		do
			Result := c_tidy_node_column (tnod.item)
		ensure
			instance_free: class
		end

	tidy_error_code_as_key (code: INTEGER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyErrorCodeAsKey ((uint)$code);
			]"
		end

	tidy_error_code_from_key (code: C_STRING): INTEGER 
		do
			Result := c_tidy_error_code_from_key (code.item)
		ensure
			instance_free: class
		end

	tidy_set_language (languagecode: C_STRING): INTEGER 
		do
			Result := c_tidy_set_language (languagecode.item)
		ensure
			instance_free: class
		end

	tidy_get_language: POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyGetLanguage ();
			]"
		end

	tidy_localized_string_n (messagetype: INTEGER; quantity: INTEGER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyLocalizedStringN ((uint)$messagetype, (uint)$quantity);
			]"
		end

	tidy_localized_string (messagetype: INTEGER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyLocalizedString ((uint)$messagetype);
			]"
		end

	tidy_default_string (messagetype: INTEGER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyDefaultString ((uint)$messagetype);
			]"
		end

feature -- Externals

	c_tidy_set_malloc_call (fmalloc: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidySetMallocCall ((TidyMalloc)$fmalloc);
			]"
		end

	c_tidy_set_realloc_call (frealloc: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidySetReallocCall ((TidyRealloc)$frealloc);
			]"
		end

	c_tidy_set_free_call (ffree: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidySetFreeCall ((TidyFree)$ffree);
			]"
		end

	c_tidy_set_panic_call (fpanic: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidySetPanicCall ((TidyPanic)$fpanic);
			]"
		end

	c_tidy_create: POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyCreate ();
			]"
		end

	c_tidy_create_with_allocator (allocator: POINTER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyCreateWithAllocator ((TidyAllocator*)$allocator);
			]"
		end

	c_tidy_release (tdoc: POINTER)
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				tidyRelease ((TidyDoc)$tdoc);
			]"
		end

	c_tidy_set_app_data (tdoc: POINTER; appdata: POINTER)
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				tidySetAppData ((TidyDoc)$tdoc, (void*)$appdata);
			]"
		end

	c_tidy_get_app_data (tdoc: POINTER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyGetAppData ((TidyDoc)$tdoc);
			]"
		end

	c_tidy_status (tdoc: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyStatus ((TidyDoc)$tdoc);
			]"
		end

	c_tidy_detected_html_version (tdoc: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyDetectedHtmlVersion ((TidyDoc)$tdoc);
			]"
		end

	c_tidy_detected_xhtml (tdoc: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyDetectedXhtml ((TidyDoc)$tdoc);
			]"
		end

	c_tidy_detected_generic_xml (tdoc: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyDetectedGenericXml ((TidyDoc)$tdoc);
			]"
		end

	c_tidy_error_count (tdoc: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyErrorCount ((TidyDoc)$tdoc);
			]"
		end

	c_tidy_warning_count (tdoc: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyWarningCount ((TidyDoc)$tdoc);
			]"
		end

	c_tidy_access_warning_count (tdoc: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyAccessWarningCount ((TidyDoc)$tdoc);
			]"
		end

	c_tidy_config_error_count (tdoc: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyConfigErrorCount ((TidyDoc)$tdoc);
			]"
		end

	c_tidy_error_summary (tdoc: POINTER)
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				tidyErrorSummary ((TidyDoc)$tdoc);
			]"
		end

	c_tidy_general_info (tdoc: POINTER)
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				tidyGeneralInfo ((TidyDoc)$tdoc);
			]"
		end

	c_tidy_load_config (tdoc: POINTER; configfile: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyLoadConfig ((TidyDoc)$tdoc, (ctmbstr)$configfile);
			]"
		end

	c_tidy_load_config_enc (tdoc: POINTER; configfile: POINTER; charenc: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyLoadConfigEnc ((TidyDoc)$tdoc, (ctmbstr)$configfile, (ctmbstr)$charenc);
			]"
		end

	c_tidy_file_exists (tdoc: POINTER; filename: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyFileExists ((TidyDoc)$tdoc, (ctmbstr)$filename);
			]"
		end

	c_tidy_set_char_encoding (tdoc: POINTER; encnam: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidySetCharEncoding ((TidyDoc)$tdoc, (ctmbstr)$encnam);
			]"
		end

	c_tidy_set_in_char_encoding (tdoc: POINTER; encnam: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidySetInCharEncoding ((TidyDoc)$tdoc, (ctmbstr)$encnam);
			]"
		end

	c_tidy_set_out_char_encoding (tdoc: POINTER; encnam: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidySetOutCharEncoding ((TidyDoc)$tdoc, (ctmbstr)$encnam);
			]"
		end

	c_tidy_set_option_callback (tdoc: POINTER; poptcallback: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidySetOptionCallback ((TidyDoc)$tdoc, (TidyOptCallback)$poptcallback);
			]"
		end

	c_tidy_set_config_callback (tdoc: POINTER; pconfigcallback: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidySetConfigCallback ((TidyDoc)$tdoc, (TidyConfigCallback)$pconfigcallback);
			]"
		end

	c_tidy_set_config_change_callback (tdoc: POINTER; pcallback: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidySetConfigChangeCallback ((TidyDoc)$tdoc, (TidyConfigChangeCallback)$pcallback);
			]"
		end

	c_tidy_opt_get_id (opt: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyOptGetId ((TidyOption)$opt);
			]"
		end

	c_tidy_opt_get_id_for_name (optnam: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyOptGetIdForName ((ctmbstr)$optnam);
			]"
		end

	c_tidy_get_option_list (tdoc: POINTER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyGetOptionList ((TidyDoc)$tdoc);
			]"
		end

	c_tidy_get_next_option (tdoc: POINTER; pos: POINTER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyGetNextOption ((TidyDoc)$tdoc, (TidyIterator*)$pos);
			]"
		end

	c_tidy_get_option (tdoc: POINTER; optid: INTEGER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyGetOption ((TidyDoc)$tdoc, (TidyOptionId)$optid);
			]"
		end

	c_tidy_get_option_by_name (tdoc: POINTER; optnam: POINTER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyGetOptionByName ((TidyDoc)$tdoc, (ctmbstr)$optnam);
			]"
		end

	c_tidy_opt_get_name (opt: POINTER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyOptGetName ((TidyOption)$opt);
			]"
		end

	c_tidy_opt_get_type (opt: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyOptGetType ((TidyOption)$opt);
			]"
		end

	c_tidy_option_is_list (opt: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyOptionIsList ((TidyOption)$opt);
			]"
		end

	c_tidy_opt_is_read_only (opt: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyOptIsReadOnly ((TidyOption)$opt);
			]"
		end

	c_tidy_opt_get_category (opt: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyOptGetCategory ((TidyOption)$opt);
			]"
		end

	c_tidy_opt_get_default (opt: POINTER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyOptGetDefault ((TidyOption)$opt);
			]"
		end

	c_tidy_opt_get_default_int (opt: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyOptGetDefaultInt ((TidyOption)$opt);
			]"
		end

	c_tidy_opt_get_default_bool (opt: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyOptGetDefaultBool ((TidyOption)$opt);
			]"
		end

	c_tidy_opt_get_pick_list (opt: POINTER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyOptGetPickList ((TidyOption)$opt);
			]"
		end

	c_tidy_opt_get_next_pick (opt: POINTER; pos: POINTER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyOptGetNextPick ((TidyOption)$opt, (TidyIterator*)$pos);
			]"
		end

	c_tidy_opt_get_value (tdoc: POINTER; optid: INTEGER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyOptGetValue ((TidyDoc)$tdoc, (TidyOptionId)$optid);
			]"
		end

	c_tidy_opt_set_value (tdoc: POINTER; optid: INTEGER; val: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyOptSetValue ((TidyDoc)$tdoc, (TidyOptionId)$optid, (ctmbstr)$val);
			]"
		end

	c_tidy_opt_parse_value (tdoc: POINTER; optnam: POINTER; val: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyOptParseValue ((TidyDoc)$tdoc, (ctmbstr)$optnam, (ctmbstr)$val);
			]"
		end

	c_tidy_opt_get_int (tdoc: POINTER; optid: INTEGER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyOptGetInt ((TidyDoc)$tdoc, (TidyOptionId)$optid);
			]"
		end

	c_tidy_opt_set_int (tdoc: POINTER; optid: INTEGER; val: INTEGER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyOptSetInt ((TidyDoc)$tdoc, (TidyOptionId)$optid, (ulong)$val);
			]"
		end

	c_tidy_opt_get_bool (tdoc: POINTER; optid: INTEGER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyOptGetBool ((TidyDoc)$tdoc, (TidyOptionId)$optid);
			]"
		end

	c_tidy_opt_set_bool (tdoc: POINTER; optid: INTEGER; val: INTEGER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyOptSetBool ((TidyDoc)$tdoc, (TidyOptionId)$optid, (Bool)$val);
			]"
		end

	c_tidy_opt_reset_to_default (tdoc: POINTER; opt: INTEGER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyOptResetToDefault ((TidyDoc)$tdoc, (TidyOptionId)$opt);
			]"
		end

	c_tidy_opt_reset_all_to_default (tdoc: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyOptResetAllToDefault ((TidyDoc)$tdoc);
			]"
		end

	c_tidy_opt_snapshot (tdoc: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyOptSnapshot ((TidyDoc)$tdoc);
			]"
		end

	c_tidy_opt_reset_to_snapshot (tdoc: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyOptResetToSnapshot ((TidyDoc)$tdoc);
			]"
		end

	c_tidy_opt_diff_than_default (tdoc: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyOptDiffThanDefault ((TidyDoc)$tdoc);
			]"
		end

	c_tidy_opt_diff_than_snapshot (tdoc: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyOptDiffThanSnapshot ((TidyDoc)$tdoc);
			]"
		end

	c_tidy_opt_copy_config (tdocto: POINTER; tdocfrom: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyOptCopyConfig ((TidyDoc)$tdocto, (TidyDoc)$tdocfrom);
			]"
		end

	c_tidy_opt_get_enc_name (tdoc: POINTER; optid: INTEGER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyOptGetEncName ((TidyDoc)$tdoc, (TidyOptionId)$optid);
			]"
		end

	c_tidy_opt_get_curr_pick (tdoc: POINTER; optid: INTEGER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyOptGetCurrPick ((TidyDoc)$tdoc, (TidyOptionId)$optid);
			]"
		end

	c_tidy_opt_get_decl_tag_list (tdoc: POINTER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyOptGetDeclTagList ((TidyDoc)$tdoc);
			]"
		end

	c_tidy_opt_get_next_decl_tag (tdoc: POINTER; optid: INTEGER; iter: POINTER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyOptGetNextDeclTag ((TidyDoc)$tdoc, (TidyOptionId)$optid, (TidyIterator*)$iter);
			]"
		end

	c_tidy_opt_get_priority_attr_list (tdoc: POINTER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyOptGetPriorityAttrList ((TidyDoc)$tdoc);
			]"
		end

	c_tidy_opt_get_next_priority_attr (tdoc: POINTER; iter: POINTER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyOptGetNextPriorityAttr ((TidyDoc)$tdoc, (TidyIterator*)$iter);
			]"
		end

	c_tidy_opt_get_muted_message_list (tdoc: POINTER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyOptGetMutedMessageList ((TidyDoc)$tdoc);
			]"
		end

	c_tidy_opt_get_next_muted_message (tdoc: POINTER; iter: POINTER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyOptGetNextMutedMessage ((TidyDoc)$tdoc, (TidyIterator*)$iter);
			]"
		end

	c_tidy_opt_get_doc (tdoc: POINTER; opt: POINTER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyOptGetDoc ((TidyDoc)$tdoc, (TidyOption)$opt);
			]"
		end

	c_tidy_opt_get_doc_links_list (tdoc: POINTER; opt: POINTER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyOptGetDocLinksList ((TidyDoc)$tdoc, (TidyOption)$opt);
			]"
		end

	c_tidy_opt_get_next_doc_links (tdoc: POINTER; pos: POINTER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyOptGetNextDocLinks ((TidyDoc)$tdoc, (TidyIterator*)$pos);
			]"
		end

	c_tidy_init_source (source: POINTER; srcdata: POINTER; gbfunc: POINTER; ugbfunc: POINTER; endfunc: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyInitSource ((TidyInputSource*)$source, (void*)$srcdata, (TidyGetByteFunc)$gbfunc, (TidyUngetByteFunc)$ugbfunc, (TidyEOFFunc)$endfunc);
			]"
		end

	c_tidy_get_byte (source: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyGetByte ((TidyInputSource*)$source);
			]"
		end

	c_tidy_unget_byte (source: POINTER; bytevalue: INTEGER)
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				tidyUngetByte ((TidyInputSource*)$source, (uint)$bytevalue);
			]"
		end

	c_tidy_is_eof (source: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyIsEOF ((TidyInputSource*)$source);
			]"
		end

	c_tidy_init_sink (sink: POINTER; snkdata: POINTER; pbfunc: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyInitSink ((TidyOutputSink*)$sink, (void*)$snkdata, (TidyPutByteFunc)$pbfunc);
			]"
		end

	c_tidy_put_byte (sink: POINTER; bytevalue: INTEGER)
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				tidyPutByte ((TidyOutputSink*)$sink, (uint)$bytevalue);
			]"
		end

	c_tidy_set_emacs_file (tdoc: POINTER; filepath: POINTER)
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				tidySetEmacsFile ((TidyDoc)$tdoc, (ctmbstr)$filepath);
			]"
		end

	c_tidy_get_emacs_file (tdoc: POINTER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyGetEmacsFile ((TidyDoc)$tdoc);
			]"
		end

	c_tidy_set_error_file (tdoc: POINTER; errfilnam: POINTER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidySetErrorFile ((TidyDoc)$tdoc, (ctmbstr)$errfilnam);
			]"
		end

	c_tidy_set_error_buffer (tdoc: POINTER; errbuf: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidySetErrorBuffer ((TidyDoc)$tdoc, (TidyBuffer*)$errbuf);
			]"
		end

	c_tidy_set_error_sink (tdoc: POINTER; sink: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidySetErrorSink ((TidyDoc)$tdoc, (TidyOutputSink*)$sink);
			]"
		end

	c_tidy_set_report_filter (tdoc: POINTER; filtcallback: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidySetReportFilter ((TidyDoc)$tdoc, (TidyReportFilter)$filtcallback);
			]"
		end

	c_tidy_set_report_callback (tdoc: POINTER; filtcallback: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidySetReportCallback ((TidyDoc)$tdoc, (TidyReportCallback)$filtcallback);
			]"
		end

	c_tidy_set_message_callback (tdoc: POINTER; filtcallback: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidySetMessageCallback ((TidyDoc)$tdoc, (TidyMessageCallback)$filtcallback);
			]"
		end

	c_tidy_get_message_doc (tmessage: POINTER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyGetMessageDoc ((TidyMessage)$tmessage);
			]"
		end

	c_tidy_get_message_code (tmessage: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyGetMessageCode ((TidyMessage)$tmessage);
			]"
		end

	c_tidy_get_message_key (tmessage: POINTER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyGetMessageKey ((TidyMessage)$tmessage);
			]"
		end

	c_tidy_get_message_line (tmessage: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyGetMessageLine ((TidyMessage)$tmessage);
			]"
		end

	c_tidy_get_message_column (tmessage: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyGetMessageColumn ((TidyMessage)$tmessage);
			]"
		end

	c_tidy_get_message_level (tmessage: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyGetMessageLevel ((TidyMessage)$tmessage);
			]"
		end

	c_tidy_get_message_is_muted (tmessage: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyGetMessageIsMuted ((TidyMessage)$tmessage);
			]"
		end

	c_tidy_get_message_format_default (tmessage: POINTER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyGetMessageFormatDefault ((TidyMessage)$tmessage);
			]"
		end

	c_tidy_get_message_format (tmessage: POINTER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyGetMessageFormat ((TidyMessage)$tmessage);
			]"
		end

	c_tidy_get_message_default (tmessage: POINTER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyGetMessageDefault ((TidyMessage)$tmessage);
			]"
		end

	c_tidy_get_message (tmessage: POINTER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyGetMessage ((TidyMessage)$tmessage);
			]"
		end

	c_tidy_get_message_pos_default (tmessage: POINTER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyGetMessagePosDefault ((TidyMessage)$tmessage);
			]"
		end

	c_tidy_get_message_pos (tmessage: POINTER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyGetMessagePos ((TidyMessage)$tmessage);
			]"
		end

	c_tidy_get_message_prefix_default (tmessage: POINTER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyGetMessagePrefixDefault ((TidyMessage)$tmessage);
			]"
		end

	c_tidy_get_message_prefix (tmessage: POINTER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyGetMessagePrefix ((TidyMessage)$tmessage);
			]"
		end

	c_tidy_get_message_output_default (tmessage: POINTER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyGetMessageOutputDefault ((TidyMessage)$tmessage);
			]"
		end

	c_tidy_get_message_output (tmessage: POINTER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyGetMessageOutput ((TidyMessage)$tmessage);
			]"
		end

	c_tidy_get_message_arguments (tmessage: POINTER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyGetMessageArguments ((TidyMessage)$tmessage);
			]"
		end

	c_tidy_get_next_message_argument (tmessage: POINTER; iter: POINTER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyGetNextMessageArgument ((TidyMessage)$tmessage, (TidyIterator*)$iter);
			]"
		end

	c_tidy_get_arg_type (tmessage: POINTER; arg: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyGetArgType ((TidyMessage)$tmessage, (TidyMessageArgument*)$arg);
			]"
		end

	c_tidy_get_arg_format (tmessage: POINTER; arg: POINTER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyGetArgFormat ((TidyMessage)$tmessage, (TidyMessageArgument*)$arg);
			]"
		end

	c_tidy_get_arg_value_string (tmessage: POINTER; arg: POINTER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyGetArgValueString ((TidyMessage)$tmessage, (TidyMessageArgument*)$arg);
			]"
		end

	c_tidy_get_arg_value_uint (tmessage: POINTER; arg: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyGetArgValueUInt ((TidyMessage)$tmessage, (TidyMessageArgument*)$arg);
			]"
		end

	c_tidy_get_arg_value_int (tmessage: POINTER; arg: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyGetArgValueInt ((TidyMessage)$tmessage, (TidyMessageArgument*)$arg);
			]"
		end

	c_tidy_get_arg_value_double (tmessage: POINTER; arg: POINTER): REAL_64
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyGetArgValueDouble ((TidyMessage)$tmessage, (TidyMessageArgument*)$arg);
			]"
		end

	c_tidy_set_pretty_printer_callback (tdoc: POINTER; callback: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidySetPrettyPrinterCallback ((TidyDoc)$tdoc, (TidyPPProgress)$callback);
			]"
		end

	c_tidy_parse_file (tdoc: POINTER; filename: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyParseFile ((TidyDoc)$tdoc, (ctmbstr)$filename);
			]"
		end

	c_tidy_parse_stdin (tdoc: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyParseStdin ((TidyDoc)$tdoc);
			]"
		end

	c_tidy_parse_string (tdoc: POINTER; content: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyParseString ((TidyDoc)$tdoc, (ctmbstr)$content);
			]"
		end

	c_tidy_parse_buffer (tdoc: POINTER; buf: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyParseBuffer ((TidyDoc)$tdoc, (TidyBuffer*)$buf);
			]"
		end

	c_tidy_parse_source (tdoc: POINTER; source: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyParseSource ((TidyDoc)$tdoc, (TidyInputSource*)$source);
			]"
		end

	c_tidy_clean_and_repair (tdoc: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyCleanAndRepair ((TidyDoc)$tdoc);
			]"
		end

	c_tidy_run_diagnostics (tdoc: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyRunDiagnostics ((TidyDoc)$tdoc);
			]"
		end

	c_tidy_report_doctype (tdoc: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyReportDoctype ((TidyDoc)$tdoc);
			]"
		end

	c_tidy_save_file (tdoc: POINTER; filename: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidySaveFile ((TidyDoc)$tdoc, (ctmbstr)$filename);
			]"
		end

	c_tidy_save_stdout (tdoc: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidySaveStdout ((TidyDoc)$tdoc);
			]"
		end

	c_tidy_save_buffer (tdoc: POINTER; buf: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidySaveBuffer ((TidyDoc)$tdoc, (TidyBuffer*)$buf);
			]"
		end

	c_tidy_save_string (tdoc: POINTER; buffer: POINTER; buflen: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidySaveString ((TidyDoc)$tdoc, (tmbstr)$buffer, (uint*)$buflen);
			]"
		end

	c_tidy_save_sink (tdoc: POINTER; sink: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidySaveSink ((TidyDoc)$tdoc, (TidyOutputSink*)$sink);
			]"
		end

	c_tidy_opt_save_file (tdoc: POINTER; cfgfil: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyOptSaveFile ((TidyDoc)$tdoc, (ctmbstr)$cfgfil);
			]"
		end

	c_tidy_opt_save_sink (tdoc: POINTER; sink: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyOptSaveSink ((TidyDoc)$tdoc, (TidyOutputSink*)$sink);
			]"
		end

	c_tidy_get_root (tdoc: POINTER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyGetRoot ((TidyDoc)$tdoc);
			]"
		end

	c_tidy_get_html (tdoc: POINTER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyGetHtml ((TidyDoc)$tdoc);
			]"
		end

	c_tidy_get_head (tdoc: POINTER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyGetHead ((TidyDoc)$tdoc);
			]"
		end

	c_tidy_get_body (tdoc: POINTER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyGetBody ((TidyDoc)$tdoc);
			]"
		end

	c_tidy_get_parent (tnod: POINTER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyGetParent ((TidyNode)$tnod);
			]"
		end

	c_tidy_get_child (tnod: POINTER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyGetChild ((TidyNode)$tnod);
			]"
		end

	c_tidy_get_next (tnod: POINTER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyGetNext ((TidyNode)$tnod);
			]"
		end

	c_tidy_get_prev (tnod: POINTER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyGetPrev ((TidyNode)$tnod);
			]"
		end

	c_tidy_discard_element (tdoc: POINTER; tnod: POINTER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyDiscardElement ((TidyDoc)$tdoc, (TidyNode)$tnod);
			]"
		end

	c_tidy_attr_first (tnod: POINTER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyAttrFirst ((TidyNode)$tnod);
			]"
		end

	c_tidy_attr_next (tattr: POINTER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyAttrNext ((TidyAttr)$tattr);
			]"
		end

	c_tidy_attr_name (tattr: POINTER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyAttrName ((TidyAttr)$tattr);
			]"
		end

	c_tidy_attr_value (tattr: POINTER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyAttrValue ((TidyAttr)$tattr);
			]"
		end

	c_tidy_attr_discard (itdoc: POINTER; tnod: POINTER; tattr: POINTER)
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				tidyAttrDiscard ((TidyDoc)$itdoc, (TidyNode)$tnod, (TidyAttr)$tattr);
			]"
		end

	c_tidy_attr_get_id (tattr: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyAttrGetId ((TidyAttr)$tattr);
			]"
		end

	c_tidy_attr_is_event (tattr: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyAttrIsEvent ((TidyAttr)$tattr);
			]"
		end

	c_tidy_attr_get_by_id (tnod: POINTER; attid: INTEGER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyAttrGetById ((TidyNode)$tnod, (TidyAttrId)$attid);
			]"
		end

	c_tidy_node_get_type (tnod: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyNodeGetType ((TidyNode)$tnod);
			]"
		end

	c_tidy_node_get_name (tnod: POINTER): POINTER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyNodeGetName ((TidyNode)$tnod);
			]"
		end

	c_tidy_node_is_text (tnod: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyNodeIsText ((TidyNode)$tnod);
			]"
		end

	c_tidy_node_is_prop (tdoc: POINTER; tnod: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyNodeIsProp ((TidyDoc)$tdoc, (TidyNode)$tnod);
			]"
		end

	c_tidy_node_is_header (tnod: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyNodeIsHeader ((TidyNode)$tnod);
			]"
		end

	c_tidy_node_has_text (tdoc: POINTER; tnod: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyNodeHasText ((TidyDoc)$tdoc, (TidyNode)$tnod);
			]"
		end

	c_tidy_node_get_text (tdoc: POINTER; tnod: POINTER; buf: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyNodeGetText ((TidyDoc)$tdoc, (TidyNode)$tnod, (TidyBuffer*)$buf);
			]"
		end

	c_tidy_node_get_value (tdoc: POINTER; tnod: POINTER; buf: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyNodeGetValue ((TidyDoc)$tdoc, (TidyNode)$tnod, (TidyBuffer*)$buf);
			]"
		end

	c_tidy_node_get_id (tnod: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyNodeGetId ((TidyNode)$tnod);
			]"
		end

	c_tidy_node_line (tnod: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyNodeLine ((TidyNode)$tnod);
			]"
		end

	c_tidy_node_column (tnod: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyNodeColumn ((TidyNode)$tnod);
			]"
		end

	c_tidy_error_code_from_key (code: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidyErrorCodeFromKey ((ctmbstr)$code);
			]"
		end

	c_tidy_set_language (languagecode: POINTER): INTEGER
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				return tidySetLanguage ((ctmbstr)$languagecode);
			]"
		end

feature -- Externals Address

end
