note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class TIDY_OUTPUT_SINK_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	sinkdata: POINTER
			-- Access member `sinkData`
		require
			exists: exists
		do
			Result := c_sinkdata (item)
		ensure
			result_correct: Result = c_sinkdata (item)
		end

	set_sinkdata (a_value: POINTER) 
			-- Change the value of member `sinkData` to `a_value`.
		require
			exists: exists
		do
			set_c_sinkdata (item, a_value)
		ensure
			sinkdata_set: a_value = sinkdata
		end

	putbyte: POINTER
			-- Access member `putByte`
		require
			exists: exists
		do
			Result := c_putbyte (item)
		ensure
			result_correct: Result = c_putbyte (item)
		end

	set_putbyte (a_value: POINTER) 
			-- Change the value of member `putByte` to `a_value`.
		require
			exists: exists
		do
			set_c_putbyte (item, a_value)
		ensure
			putbyte_set: a_value = putbyte
		end

feature {NONE} -- Implementation wrapper for struct struct _TidyOutputSink

	sizeof_external: INTEGER 
		external
			"C inline use <eif_tidy.h>"
		alias
			"sizeof(struct _TidyOutputSink)"
		end

	c_sinkdata (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				((struct _TidyOutputSink*)$an_item)->sinkData
			]"
		end

	set_c_sinkdata (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				((struct _TidyOutputSink*)$an_item)->sinkData =  (void*)$a_value
			]"
		ensure
			sinkdata_set: a_value = c_sinkdata (an_item)
		end

	c_putbyte (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				((struct _TidyOutputSink*)$an_item)->putByte
			]"
		end

	set_c_putbyte (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				((struct _TidyOutputSink*)$an_item)->putByte =  (TidyPutByteFunc)$a_value
			]"
		ensure
			putbyte_set: a_value = c_putbyte (an_item)
		end

end
