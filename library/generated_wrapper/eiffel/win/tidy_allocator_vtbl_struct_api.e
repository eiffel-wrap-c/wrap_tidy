note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class TIDY_ALLOCATOR_VTBL_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	alloc: POINTER
			-- Access member `alloc`
		require
			exists: exists
		do
			Result := c_alloc (item)
		ensure
			result_correct: Result = c_alloc (item)
		end

	set_alloc (a_value: POINTER) 
			-- Change the value of member `alloc` to `a_value`.
		require
			exists: exists
		do
			set_c_alloc (item, a_value)
		ensure
			alloc_set: a_value = alloc
		end

	realloc: POINTER
			-- Access member `realloc`
		require
			exists: exists
		do
			Result := c_realloc (item)
		ensure
			result_correct: Result = c_realloc (item)
		end

	set_realloc (a_value: POINTER) 
			-- Change the value of member `realloc` to `a_value`.
		require
			exists: exists
		do
			set_c_realloc (item, a_value)
		ensure
			realloc_set: a_value = realloc
		end

	free: POINTER
			-- Access member `free`
		require
			exists: exists
		do
			Result := c_free (item)
		ensure
			result_correct: Result = c_free (item)
		end

	set_free (a_value: POINTER) 
			-- Change the value of member `free` to `a_value`.
		require
			exists: exists
		do
			set_c_free (item, a_value)
		ensure
			free_set: a_value = free
		end

	panic: POINTER
			-- Access member `panic`
		require
			exists: exists
		do
			Result := c_panic (item)
		ensure
			result_correct: Result = c_panic (item)
		end

	set_panic (a_value: POINTER) 
			-- Change the value of member `panic` to `a_value`.
		require
			exists: exists
		do
			set_c_panic (item, a_value)
		ensure
			panic_set: a_value = panic
		end

feature {NONE} -- Implementation wrapper for struct struct _TidyAllocatorVtbl

	sizeof_external: INTEGER 
		external
			"C inline use <eif_tidy.h>"
		alias
			"sizeof(struct _TidyAllocatorVtbl)"
		end

	c_alloc (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				((struct _TidyAllocatorVtbl*)$an_item)->alloc
			]"
		end

	set_c_alloc (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				((struct _TidyAllocatorVtbl*)$an_item)->alloc =  (void *(__fastcall *) (TidyAllocator *self, size_t nbytes))$a_value
			]"
		ensure
			alloc_set: a_value = c_alloc (an_item)
		end

	c_realloc (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				((struct _TidyAllocatorVtbl*)$an_item)->realloc
			]"
		end

	set_c_realloc (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				((struct _TidyAllocatorVtbl*)$an_item)->realloc =  (void *(__fastcall *) (TidyAllocator *self, void *block, size_t nbytes))$a_value
			]"
		ensure
			realloc_set: a_value = c_realloc (an_item)
		end

	c_free (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				((struct _TidyAllocatorVtbl*)$an_item)->free
			]"
		end

	set_c_free (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				((struct _TidyAllocatorVtbl*)$an_item)->free =  (void (__fastcall *) (TidyAllocator *self, void *block))$a_value
			]"
		ensure
			free_set: a_value = c_free (an_item)
		end

	c_panic (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				((struct _TidyAllocatorVtbl*)$an_item)->panic
			]"
		end

	set_c_panic (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_tidy.h>"
		alias
			"[
				((struct _TidyAllocatorVtbl*)$an_item)->panic =  (void (__fastcall *) (TidyAllocator *self, ctmbstr msg))$a_value
			]"
		ensure
			panic_set: a_value = c_panic (an_item)
		end

end
